Metadata-Version: 2.1
Name: qns3vm
Version: 0.1.37
Summary: 
Author: Kotaro SONODA
Author-email: kotaro1976@gmail.com
Requires-Python: >=3.10,<3.11
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Requires-Dist: matplotlib (>=3.6.1,<4.0.0)
Requires-Dist: numpy (>=1.23.5,<2.0.0)
Requires-Dist: pandas (>=1.5.1,<2.0.0)
Requires-Dist: scipy (>=1.9.3,<2.0.0)
Description-Content-Type: text/markdown

# QN-S3VM BFGS optimizer for semi-supervised support vector machines.

This implementation provides both a L-BFGS optimization scheme for semi-supvised support vector machines. Details can be found in:

```{.bib}
@InProceeding{Gieseke:2012
    authors = {F. Gieseke and A. Airola and T. Pahikkala and O. Kramer},
    title = {Sparse quasi-Newton optimization for semi-supervised support vector machines},
    booktitle = {the 1st Int. Conf. on Pattern Recognition Applications and Methods},
    year = 2012,
    pages = {45--54}
}
```

## modification from [NekoYIQ/QNS3VM](https://github.com/NekoYIQI/QNS3VM) or [tmadl/semisup-learn](https://github.com/tmadl/semisup-learn)

### `class qns3vm.QN_S3VM(X_l, L_l, X_u, lam, lamU, sigma, kernel_type, estimate_r)`

`L_l` must labeled 2-classes

### `class qns3vm.QN_S3VM_OVR(X_l, L_l, X_u, lam, lamU, sigma, kernel_type, estimate_r)`

### `qns3vm.datasets`

data acquiring functions. these are from original example's main code.

- `X_train_l, L_train_l, X_train_u, X_test, L_test = get_moons_data()`
- `X_train_l, L_train_l, X_train_u, X_test, L_test = get_text_data()`
- `X_train_l, L_train_l, X_train_u, X_test, L_test = get_gaussian_data()`

### `qns3vm.tools`

- `plot_distribution(ax,clf,X_train_l, L_train_l, X_test, L_test)->None`
- `classification_error(preds, L_test)->float`

# RUNNING THE EXAMPLES

For a description of the data sets, see the paper mentioned above and the references therein.

| data set instance | # of labeled patterns | # of unlabeled patterns | # of test patterns | Time needed to compute the model in sec. | Classification error of QN-S3VM |
|---|---|---|---|---|---|
|Sparse text|48|924|974|0.775886058807|0.0667351129363|
|Dense gaussian|25|225|250|0.464584112167|0.012|
|Dense moons|5|495|500|0.69714307785|0.0|

```{python}
from qns3vm import QN_S3vm
from qns3vm.datasets import get_moons_data
from matplotlib import pyplot as plt

X_train_l, L_train_l, X_train_u, X_test, L_test = get_moons_data()
clf = QN_S3VM(X_train_l, L_train_l, X_train_u, lam=, lamU=, sigma=, kernel_type="RBF", estimate_r=0)
clf.train()
preds = clf.predict(X_test)
error = classification_error(preds,L_test)
print(f"classification error of QN-S3VM: {error}")

figure = plt.figure()
ax = figure.add_subplot(1,1,1)
plot_distribution(ax, clf, X_train_l, L_train_l, X_test, L_test)
```

